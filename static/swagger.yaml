openapi: 3.0.0
info:
  title: User Registration API
  description: API for user registration and management, secured with JWT.
  version: 1.0.0

servers:
  - url: http://localhost:5000
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Authorization header using the Bearer scheme. Example: 'Authorization: Bearer {token}'"

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          example: "johndoe@example.com"

    LoginRequest:
      type: object
      properties:
        username:
          type: string
          example: "johndoe"
          description: "The username of the user trying to log in."
        password:
          type: string
          example: "strongpassword123"
          description: "The password for the user account."
      required:
        - username
        - password

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: "JWT token to be used for subsequent requests."
        token_type:
          type: string
          example: "Bearer"
          description: "The type of the token."
        expires_in:
          type: integer
          example: 3600
          description: "The duration in seconds for which the token is valid."

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Invalid username or password"
          description: "Error message indicating the issue."

    UserListResponse:
      type: array
      items:
        $ref: '#/components/schemas/User'

    BackupResponse:
      type: object
      properties:
        message:
          type: string
          example: "Backup created successfully."
        error:
          type: string
          example: "An error occurred while creating the backup."

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: Operations related to user authentication and registration.
  - name: Users
    description: Operations for managing users.
  - name: BackupDB
    description: Operations for database backup management.

paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Registers a new user by providing a username, email, and password.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "johndoe"
                email:
                  type: string
                  example: "johndoe@example.com"
                password:
                  type: string
                  example: "strongpassword123"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
        '403':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: User login
      description: Logs in a user and returns a JWT token. Ensure to provide valid credentials to obtain a token for future requests.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully logged in and returns a JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: User logout
      description: Invalidates the user's JWT token, effectively logging them out.
      tags:
        - Authentication
      security:
        - BearerAuth: []  # This endpoint requires JWT authentication
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User logged out successfully."
        '401':
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing or invalid JWT token"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"

  /auth/whoami:
    get:
      summary: Get the current user's claims
      description: Retrieves the claims of the currently authenticated user.
      tags:
        - Authentication
      security:
        - BearerAuth: []  # This endpoint requires JWT authentication
      responses:
        '200':
          description: Successfully retrieved user claims
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Here are your claims"
                  claims:
                    type: object
                    additionalProperties: true  # Dynamic structure for claims
        '401':
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing or invalid JWT token"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"
                    
  /users/all:
    get:
      summary: Get list of users
      description: Retrieves a list of registered users.
      tags:
        - Users
      security:
        - BearerAuth: []   # This endpoint requires JWT authentication
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /backup:
    post:
      summary: Backup the database
      description: Creates a backup of the entire database and saves it as a SQL file.
      tags:
        - BackupDB
      responses:
        '200':
          description: Backup created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupResponse'
        '500':
          description: Error creating backup
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupResponse'
